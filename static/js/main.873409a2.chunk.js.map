{"version":3,"sources":["components/Navbar/Navbar.jsx","components/ConfirmModal/ConfirmModal.jsx","components/List/ListItem.jsx","components/List/List.jsx","components/List/AddModal.jsx","components/List/ListView.jsx","components/History/HistorySet.jsx","components/History/HistoryLog.jsx","components/History/History.jsx","components/Exercise/ExerciseSet.jsx","components/Exercise/ExerciseTable.jsx","components/DoneExercise/DoneExercise.jsx","components/Workout/Workout.jsx","components/Exercise/ExerciseView.jsx","App.jsx","index.js"],"names":["Navbar","useState","isClicked","setIsClicked","handleLinks","className","onClick","to","ConfirmModal","message","onConfirm","onCancel","ListItem","type","listItem","workoutName","handleDeleteListItem","setCurrWorkoutName","setCurrExerciseName","confirm","setConfirm","selectWorkout","name","deleteExerciseFromWorkoutMsg","deleteWorkoutMsg","deleteExerciseMsg","confirmMessage","sets","reps","last_day","List","list","setList","setSecondList","workingList","exercises","handleDeleteList","t","n","ln","prevList","filter","item","map","workout","prevSecondList","newExercises","exercise","index","AddModal","newData","modal_content","setModalClicked","exerciseList","newName","setNewName","newSets","setNewSets","newReps","setNewReps","handleNameInput","e","target","value","history","alert","placeholder","onChange","id","hidden","min","onSubmit","preventDefault","prevWorkout","ListView","modalClicked","HistorySet","set","weight","HistoryLog","date","History","length","log","ExerciseSet","currentExercise","setCurrentExercise","exerciseNumber","cReps","setCReps","cWeight","setCWeight","setSaved","setSetSaved","useEffect","prevExercise","cSet","ExerciseTable","DoneExercise","Workout","arrFilter","setWorkingWorkout","showHistory","setShowHistory","showModal","setShowModal","showModalSaved","setShowModalSaved","direction","setDirection","saved","savedCurrDoneSets","setSavedCurrDoneSets","emptySets","setEmptySets","isDone","setIsDone","currWorkout","setCurrWorkout","setExerciseNumber","Array","fill","found","find","currExerciseNumber","nextExercise","alreadyDone","arr","currentlyDone","it","findItem","prevCurrWorkout","exerciseName","exerciseIndex","findIndex","cleanSets","wk","ExerciseView","App","exercises_data","ExercisesList","workouts_data","WorkoutsList","setExercises","workouts","setWorkouts","currWorkoutName","currExerciseName","currW","w","currE","ex","exact","path","currentDate","Date","day","getDate","month","getMonth","year","getFullYear","padded_month","getCurrentDate","prevWorkouts","prevExercises","crEx","i","currExHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.873409a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Navbar.scss';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nfunction Navbar() {\r\n\r\n    const [isClicked, setIsClicked] = useState(false);\r\n\r\n    const handleLinks = () => {\r\n        setIsClicked(false);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"menu-icon\" onClick={() => setIsClicked(!isClicked)}>\r\n                <i className={isClicked ? \"fas fa-times\" : \"fas fa-bars\"}></i>\r\n            </div>\r\n            <ul className={isClicked ? \"nav-menu active\" : \"nav-menu\"}>\r\n                <li >\r\n                    <Link to={\"/workouts\"} className=\"nav-links\" onClick={handleLinks}>Workouts</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/exercises\" className=\"nav-links\" onClick={handleLinks}>Exercises</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction ConfirmModal({ message, onConfirm, onCancel }) {\r\n    return (\r\n        <div className=\"modal\">\r\n            <form className=\"modal-form\">\r\n                <div className=\"close-modal\" onClick={onCancel}>\r\n                    <i className=\"fas fa-times\"></i>\r\n                </div>\r\n                <div className=\"confirm-title\">\r\n                    Are you sure?\r\n                </div>\r\n                <div className=\"confirm-text\">\r\n                    {message}\r\n                </div>\r\n                <div className=\"confirm-cancel-btn-box\">\r\n                    <button className=\"btn cancel-btn\" onClick={onCancel}>Cancel</button>\r\n                    <button className=\"btn\" onClick={onConfirm}>Confirm</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmModal;\r\n","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport ConfirmModal from '../ConfirmModal/ConfirmModal';\r\n\r\nfunction ListItem({ type, listItem, workoutName, handleDeleteListItem, setCurrWorkoutName, setCurrExerciseName }) {\r\n\r\n    const [confirm, setConfirm] = useState(false);\r\n\r\n    const onConfirm = () => {\r\n        handleDeleteListItem(type, listItem.name, workoutName);\r\n        setConfirm(false);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        setConfirm(false);\r\n    }\r\n\r\n    const selectWorkout = () => {\r\n        if (type === \"workouts\") {\r\n            setCurrWorkoutName(listItem.name);\r\n        } else {\r\n            setCurrExerciseName(listItem.name);\r\n        }\r\n    }\r\n\r\n    const deleteExerciseFromWorkoutMsg = `The ${listItem.name} exercise will be deleted from the ${workoutName} workout.`;\r\n    const deleteWorkoutMsg = `The ${listItem.name} workout will be deleted. ${workoutName}`;\r\n    const deleteExerciseMsg = `The ${listItem.name} exercise will be removed from all the workouts and it will lose its history.`;\r\n    const confirmMessage = type === \"workout\" ? deleteExerciseFromWorkoutMsg : (type === \"workouts\" ? deleteWorkoutMsg : deleteExerciseMsg)\r\n\r\n\r\n    return (\r\n        <>\r\n            {confirm && <ConfirmModal message={confirmMessage} onConfirm={onConfirm} onCancel={onCancel} />}\r\n            <li className=\"list-item\">\r\n                <div className=\"item-title-list\">\r\n                    {\r\n                        type === \"workouts\" ?\r\n                            <Link to={`/workout-detail`} onClick={selectWorkout}>\r\n                                {listItem.name}\r\n                            </Link> :\r\n                            <Link to={`/exercise-detail`} onClick={selectWorkout}>\r\n                                {listItem.name}\r\n                            </Link>\r\n                    }\r\n                </div>\r\n                <div className=\"sets-delete-wrapper\">\r\n                    <small className=\"list-extra-info\">\r\n                        {\r\n                            type === \"workout\" ?\r\n                                `SETS: ${listItem.sets} / REPS: ${listItem.reps}`\r\n                                :\r\n                                type === \"workouts\" ?\r\n                                    `Last: ${listItem.last_day}`\r\n                                    :\r\n                                    null\r\n                        }\r\n                    </small>\r\n                    <div className=\"delete-item\" onClick={() => setConfirm(true)} >\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from './ListItem.jsx';\r\n\r\nfunction List({ type, list, setList, setSecondList, setCurrWorkoutName, setCurrExerciseName }) {\r\n\r\n    const workingList = type === \"workout\" ? list.exercises : list;\r\n\r\n    const handleDeleteList = (t, n, ln = \"\") => {\r\n        if (t === \"workouts\") {\r\n            setList(prevList => prevList.filter(item => item.name !== n));\r\n        } else if (t === \"workout\") {\r\n            setList(prevList => {               \r\n                return prevList.map(workout => {\r\n                    if(workout.name === ln) {\r\n                        return {...workout, exercises: [...workout.exercises.filter(item => item.name !== n)]};\r\n                    }\r\n                    return workout;\r\n                });\r\n            })\r\n        } else if (t === \"exercises\") {\r\n            setList(prevList => prevList.filter(item => item.name !== n));\r\n            setSecondList(prevSecondList => {\r\n                return prevSecondList.map(workout => {\r\n                    const newExercises = workout.exercises.filter(exercise => exercise.name !== n);\r\n                    return {...workout, exercises: [...newExercises]}\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list\">\r\n            {\r\n                workingList.map((item, index) => <ListItem \r\n                                                    key={index} \r\n                                                    type={type} \r\n                                                    listItem={item} \r\n                                                    workoutName={list.name}\r\n                                                    handleDeleteListItem={handleDeleteList}\r\n                                                    setCurrWorkoutName={setCurrWorkoutName}\r\n                                                    setCurrExerciseName={setCurrExerciseName}\r\n                                                     />)\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List;\r\n","import React, { useState } from 'react';\r\n\r\nfunction AddModal({ type, list, setList, setModalClicked, exerciseList }) {\r\n\r\n    const [newName, setNewName] = useState('');\r\n    const [newSets, setNewSets] = useState(0);\r\n    const [newReps, setNewReps] = useState(0);\r\n\r\n    const handleNameInput = e => setNewName(e.target.value);\r\n    const handleSetsInput = e => setNewSets(e.target.value);\r\n    const handleRepsInput = e => setNewReps(e.target.value);\r\n    const handleEnterSets = () => setNewSets(\"\");\r\n    const handleEnterReps = () => setNewReps(\"\");\r\n\r\n    let newData;\r\n\r\n    if (type === \"workouts\") {\r\n        newData = { name: newName, last_day: \"\", exercises: [] };\r\n    } else if (type === \"workout\") {\r\n        newData = { name: newName, sets: newSets, reps: newReps }\r\n    } else if (type === \"exercises\") {\r\n        newData = { name: newName, history: [] }\r\n    } else {\r\n        alert(\"Wrong type\");\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (newName === \"\") {\r\n            alert(\"Chose a name\");\r\n            return;\r\n        }\r\n        if (type === \"workout\") {\r\n            setList(prevWorkout => {\r\n                return prevWorkout.map(workout => {\r\n                    if (workout.name === list.name) {\r\n                        let newExercises = workout.exercises.filter(exercise => exercise.name !== newData.name);\r\n\r\n                        return { ...workout, exercises: [...newExercises, newData] }\r\n                    }\r\n                    return workout;\r\n                })\r\n            });\r\n            setNewName(\"\");\r\n            setNewSets(0);\r\n            setNewSets(0);\r\n            setModalClicked(false);\r\n        } else {\r\n            setList([...list, newData]);\r\n            setNewName(\"\");\r\n            setModalClicked(false);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    let modal_content;\r\n\r\n    if (type !== \"workout\") {\r\n\r\n        modal_content =\r\n            <input\r\n                type=\"text\"\r\n                placeholder={type === \"workouts\" ? \"Workout name...\" : \"Exercise name...\"}\r\n                name='name'\r\n                value={newName}\r\n                className=\"input-field\"\r\n                onChange={handleNameInput}\r\n            />;\r\n    } else if (type === \"workout\") {\r\n        modal_content =\r\n            <>\r\n                <select name='exercises' id=\"exercises\" className=\"input-field select-input\" onChange={handleNameInput}>\r\n                    <option value=\"\" hidden>Select an exercise...</option>\r\n                    {\r\n                        exerciseList.map((exercise, index) => {\r\n                            return (\r\n                                <option key={index} value={exercise.name}>{exercise.name}</option>\r\n                            )\r\n                        }\r\n                        )\r\n                    }\r\n                </select>\r\n                <div className=\"sets-reps-inputs\">\r\n                    <div className=\"number-input-box\">\r\n                        <label>SETS</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            name='sets'\r\n                            value={newSets}\r\n                            min=\"0\"\r\n                            className=\"input-field number-input\"\r\n                            onClick={handleEnterSets}\r\n                            onChange={handleSetsInput}\r\n                        />\r\n                    </div>\r\n                    <div className=\"number-input-box\">\r\n                        <label>REPS</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            name='reps'\r\n                            value={newReps}\r\n                            min=\"0\"\r\n                            className=\"input-field number-input\"\r\n                            onClick={handleEnterReps}\r\n                            onChange={handleRepsInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>;\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <form className=\"modal-form\" onSubmit={handleSubmit}>\r\n                <div className=\"close-modal\" onClick={() => setModalClicked(false)}>\r\n                    <i className=\"fas fa-times\"></i>\r\n                </div>\r\n                {modal_content}\r\n                <button className=\"btn\">Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddModal;\r\n","import React, { useState } from 'react';\r\nimport './List.scss';\r\nimport List from './List';\r\nimport { Link } from \"react-router-dom\";\r\nimport AddModal from './AddModal';\r\n\r\nfunction ListView({ type, list, setList, setSecondList, exerciseList, setCurrWorkoutName, setCurrExerciseName }) {\r\n\r\n    const [modalClicked, setModalClicked] = useState(false);\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"list-title\">{type === \"workout\" ? list.name : type}</div>\r\n            <List type={type} list={list} setList={setList} setSecondList={setSecondList} setCurrWorkoutName={setCurrWorkoutName} setCurrExerciseName={setCurrExerciseName} />\r\n            {\r\n                !modalClicked || <AddModal\r\n                    type={type}\r\n                    list={list}\r\n                    setList={setList}\r\n                    setModalClicked={setModalClicked}\r\n                    exerciseList={exerciseList}\r\n                />\r\n            }\r\n            <button className=\"btn btn-list-view\" onClick={() => setModalClicked(true)}>+ add {type === \"workout\" ? \"exercise\" : type}</button>\r\n            {type !== \"workout\" || <Link to={`/workout-detail/start`} className=\"btn btn-list-view\">Start workout</Link>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListView;\r\n","import React from 'react';\r\n\r\nfunction HistorySet({ set, reps, weight }) {\r\n    return (\r\n        <div className=\"set\">\r\n            <div className=\"set-number\">SET {set + 1}</div>\r\n            <div className=\"reps-number\">{reps} reps</div>\r\n            <div className=\"weight-number\">{weight} kg</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HistorySet;","import React from 'react';\r\nimport HistorySet from './HistorySet';\r\n\r\nfunction HistoryLog({ date, sets }) {\r\n    return (\r\n        <div className=\"history-log\">\r\n            <div className=\"date\">\r\n                <h4>{date}</h4>\r\n            </div>\r\n            <div className=\"sets\">\r\n                {\r\n                    sets.map(\r\n                        (set, index) =>\r\n                            <HistorySet\r\n                                key={index}\r\n                                set={index}\r\n                                reps={set.reps}\r\n                                weight={set.weight}\r\n                            />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HistoryLog;\r\n","import React from 'react';\r\nimport HistoryLog from './HistoryLog';\r\nimport './History.scss';\r\n\r\nfunction History({ history }) {\r\n    return (\r\n        <div className=\"history\">\r\n            {history.length === 0 && <div className=\"no-history\">No history yet for this exercise</div>}\r\n            {history.map((log, index) => <HistoryLog key={index} date={log.date} sets={log.sets} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction ExerciseSet({ set, currentExercise, setCurrentExercise, exerciseNumber }) {\r\n\r\n    const [cReps, setCReps] = useState(0);\r\n    const [cWeight, setCWeight] = useState(0);\r\n    const [setSaved, setSetSaved] = useState(false);\r\n\r\n\r\n    const handleRepsChange = e => setCReps(e.target.value);\r\n    const handleWeightChange = e => setCWeight(e.target.value);\r\n    const handleRepClick = () => {\r\n        setCReps(\"\");\r\n        setSetSaved(false);\r\n    };\r\n    const handleWeightClick = () => {\r\n        setCWeight(\"\");\r\n        setSetSaved(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCReps(0);\r\n        setCWeight(0);\r\n        setSetSaved(false);\r\n    }, [exerciseNumber])\r\n\r\n\r\n    const handleSet = () => {\r\n        if (cReps !== 0) {\r\n            setCurrentExercise(prevExercise => {\r\n                return prevExercise.map(cSet => {\r\n                    if (cSet.set === set) {\r\n                        return { ...cSet, reps: cReps, weight: cWeight };\r\n                    }\r\n                    return cSet;\r\n                })\r\n            })\r\n            setSetSaved(true);\r\n        }\r\n    }\r\n\r\n\r\n    const deleteSet = () => {\r\n        setCurrentExercise(prevExercise => {\r\n            return prevExercise.filter(cSet => {\r\n                return cSet.set !== set\r\n\r\n            })\r\n        });\r\n\r\n    };\r\n\r\n    return (\r\n        <tr className={setSaved ? \"saved-set\" : \"\"}>\r\n            <td>{set}</td>\r\n            <td>\r\n                <input type=\"number\" min=\"0\" value={cWeight} onChange={handleWeightChange} onClick={handleWeightClick} /><small>kg</small>\r\n            </td>\r\n            <td>\r\n                <input type=\"number\" min=\"0\" value={cReps} onChange={handleRepsChange} onClick={handleRepClick} />\r\n            </td>\r\n            <td>\r\n                <i className=\"fas fa-check\" onClick={handleSet}></i>\r\n            </td>\r\n            <td>\r\n                {\r\n                    set !== currentExercise.length || <i className=\"fas fa-times\" onClick={deleteSet}></i>\r\n\r\n                }\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ExerciseSet;\r\n","import React from 'react';\r\nimport ExericseSet from './ExerciseSet';\r\n\r\nfunction ExerciseTable({ currentExercise, setCurrentExercise, exerciseNumber }) {\r\n\r\n    return (\r\n        <table className=\"sets-table\">\r\n            <tbody>\r\n                <tr>\r\n                    <th>SET</th>\r\n                    <th>Weight</th>\r\n                    <th>Reps</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                </tr>\r\n                {\r\n                    currentExercise.map((item, index) =>\r\n                        <ExericseSet\r\n                            key={index}\r\n                            set={item.set}\r\n                            currentExercise={currentExercise}\r\n                            setCurrentExercise={setCurrentExercise}\r\n                            exerciseNumber={exerciseNumber}\r\n                        />\r\n                    )\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ExerciseTable;\r\n","import React from 'react';\r\nimport './DoneExercise.scss';\r\nimport '../History/History.scss';\r\nimport HistorySet from '../History/HistorySet';\r\n\r\nfunction DoneExercise({ sets }) {\r\n    return (\r\n        <>\r\n            <div className=\"history\">\r\n                <div className=\"history-log\">\r\n                    <div className=\"sets\">\r\n                        {\r\n                            sets &&\r\n                            sets.map((set, index) => {\r\n                                return <HistorySet\r\n                                    key={index}\r\n                                    set={index}\r\n                                    reps={set.reps}\r\n                                    weight={set.weight}\r\n                                />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"done-exercise\">\r\n                <h3>DONE</h3>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DoneExercise;\r\n","import React, { useState, useEffect } from 'react';\r\nimport History from '../History/History';\r\nimport ExerciseTable from '../Exercise/ExerciseTable';\r\nimport ConfirmModal from '../ConfirmModal/ConfirmModal';\r\nimport { Link } from \"react-router-dom\";\r\nimport './Workout.scss';\r\nimport DoneExercise from '../DoneExercise/DoneExercise';\r\n\r\nfunction Workout({ workout, setWorkingWorkout, exerciseList }) {\r\n\r\n    const { name, exercises } = workout;\r\n\r\n    const [showHistory, setShowHistory] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [showModalSaved, setShowModalSaved] = useState(false);\r\n    const [direction, setDirection] = useState(\"prev\");\r\n    const [saved, setSaved] = useState(false);\r\n    const [savedCurrDoneSets, setSavedCurrDoneSets] = useState({});\r\n    const [emptySets, setEmptySets] = useState(false);\r\n    const [isDone, setIsDone] = useState(false);\r\n    const [currWorkout, setCurrWorkout] = useState([]);\r\n    const [exerciseNumber, setExerciseNumber] = useState(0);\r\n    const [currentExercise, setCurrentExercise] = useState(new Array(exercises[exerciseNumber].sets).fill(0).map((item, index) => {\r\n        return { set: (index + 1), reps: 0, weight: 0 }\r\n    })\r\n    );\r\n\r\n    const filterByName = (arr, arrFilter) => {\r\n        return arr.filter(item => {\r\n            let found = false;\r\n            for (let it of arrFilter) {\r\n                if (it.name === item.name) found = true;\r\n            }\r\n            return found;\r\n        })\r\n    }\r\n    const filtered_exerciseList = filterByName(exerciseList, exercises);\r\n    const history = filtered_exerciseList.find(exercise => exercise.name === exercises[exerciseNumber].name).history;\r\n\r\n\r\n    const findItem = (arr, item) => {\r\n        let found = false;\r\n        let currentlyDone = {};\r\n\r\n        for (let it of arr) {\r\n            if (it.name === item.name) {\r\n                found = true;\r\n                currentlyDone = { ...it };\r\n                break;\r\n            }\r\n        }\r\n        return { found, currentlyDone };\r\n    }\r\n\r\n\r\n    const prevExercise = () => {\r\n        if (exerciseNumber > 0) {\r\n            setExerciseNumber(currExerciseNumber => currExerciseNumber - 1);\r\n        } else {\r\n            setExerciseNumber(exercises.length - 1);\r\n        }\r\n    }\r\n\r\n    const nextExercise = () => {\r\n        if (exerciseNumber < (exercises.length - 1)) {\r\n            setExerciseNumber(currExerciseNumber => currExerciseNumber + 1);\r\n        } else {\r\n            setExerciseNumber(0);\r\n        }\r\n    }\r\n\r\n    const handlePrevExercise = () => {\r\n        setDirection(\"prev\");\r\n        const cleanSets = currentExercise.filter(set => set.reps > 0);\r\n        if (!saved && cleanSets.length !== 0) {\r\n            setShowModal(true);\r\n        } else {\r\n            prevExercise();\r\n        }\r\n    }\r\n\r\n    const handleNextExercise = () => {\r\n        setDirection(\"next\");\r\n        const cleanSets = currentExercise.filter(set => set.reps > 0);\r\n        if (!saved && cleanSets.length !== 0) {\r\n            setShowModal(true);\r\n        } else {\r\n            nextExercise();\r\n        }\r\n    }\r\n\r\n    const handleNotSavedDirections = () => {\r\n        if (direction === \"next\") {\r\n            nextExercise();\r\n            setShowModal(false);\r\n        } else if (direction === \"prev\") {\r\n            prevExercise();\r\n            setShowModal(false);\r\n        }\r\n    }\r\n\r\n\r\n    const handleAddSet = () => {\r\n        setCurrentExercise([...currentExercise, { set: currentExercise.length + 1, reps: 0, weight: 0 }])\r\n    }\r\n\r\n    const handleSaveWorkout = () => {\r\n\r\n        setCurrWorkout(prevCurrWorkout => {\r\n\r\n            const exerciseName = exercises[exerciseNumber].name;\r\n            const exerciseIndex = prevCurrWorkout.findIndex((item) => item.name === exerciseName);\r\n            const cleanSets = currentExercise.filter(set => set.reps > 0);\r\n\r\n            if (cleanSets.length === 0) {\r\n                return prevCurrWorkout;\r\n            }\r\n\r\n            if (exerciseIndex === -1) {\r\n                return [...prevCurrWorkout, { name: exerciseName, sets: cleanSets }]\r\n            } else {\r\n                const wk = [...prevCurrWorkout];\r\n                wk[exerciseIndex].sets = [...cleanSets];\r\n                return wk;\r\n            }\r\n        })\r\n        setSaved(true);\r\n        setShowModalSaved(false);\r\n    }\r\n\r\n    const handleSavedModal = () => {\r\n        const cleanSets = currentExercise.filter(set => set.reps > 0);\r\n        if (cleanSets.length === 0) {\r\n            setEmptySets(true);\r\n        } else {\r\n            setEmptySets(false);\r\n            setShowModalSaved(true);\r\n        }\r\n\r\n    }\r\n\r\n    const handleFinishWorkout = current_workout => {\r\n        setWorkingWorkout(name, current_workout);\r\n        setCurrWorkout([]);\r\n        setCurrentExercise(new Array(exercises[exerciseNumber].sets).fill(0).map((item, index) => {\r\n            return { set: (index + 1), reps: 0, weight: 0 }\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const alreadyDone = findItem(currWorkout, exercises[exerciseNumber]);\r\n        setIsDone(alreadyDone.found);\r\n        setSaved(alreadyDone.found);\r\n        setSavedCurrDoneSets(alreadyDone.currentlyDone);\r\n    }, [currWorkout, exerciseNumber, exercises])\r\n\r\n    useEffect(() => {\r\n        const arr = new Array(exercises[exerciseNumber].sets).fill(0).map((item, index) => {\r\n            return { set: (index + 1), reps: 0, weight: 0 }\r\n        });\r\n        setCurrentExercise([...arr]);\r\n        setEmptySets(false);\r\n    }, [exerciseNumber, exercises])\r\n\r\n\r\n\r\n    const changeExerciseMessage = \"The data not saved will be lost.\";\r\n    const savedExerciseMessage = \"You won't be able to edit afterwards.\";\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {showModalSaved && <ConfirmModal message={savedExerciseMessage} onConfirm={handleSaveWorkout} onCancel={() => setShowModalSaved(false)} />}\r\n            {showModal && <ConfirmModal message={changeExerciseMessage} onConfirm={handleNotSavedDirections} onCancel={() => setShowModal(false)} />}\r\n            <div className=\"header-box\">\r\n                <div className=\"workout-title-list workout-title\">\r\n                    {name}\r\n                </div>\r\n                <div className=\"header-exercise\">\r\n                    <i className=\"fas fa-angle-left\" onClick={handlePrevExercise} />\r\n                    <div className=\"workout-title-list exercise-title\">\r\n                        {exercises[exerciseNumber].name}\r\n                    </div>\r\n                    <i className=\"fas fa-angle-right\" onClick={handleNextExercise} />\r\n                </div>\r\n            </div>\r\n            <div className=\"control-box\">\r\n                <div className={showHistory ? \"small-btn\" : \"small-btn active\"} onClick={() => { setShowHistory(false) }}>sets&reps</div>\r\n                <div className=\"workout-title-list exercise-title\" >{exercises[exerciseNumber].sets + \" SETS / \" + exercises[exerciseNumber].reps + \" REPS\"}</div>\r\n                <div className={showHistory ? \"small-btn active\" : \"small-btn\"} onClick={() => { setShowHistory(true) }}>history</div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            {   isDone ?\r\n                <DoneExercise sets={savedCurrDoneSets.sets} />\r\n                :\r\n\r\n                (showHistory ?\r\n                    <History history={history} />\r\n                    :\r\n                    <>\r\n                        <ExerciseTable\r\n                            currentExercise={currentExercise}\r\n                            setCurrentExercise={setCurrentExercise}\r\n                            exerciseNumber={exerciseNumber}\r\n                        />\r\n                        <div className=\"empty-sets-alert\">{emptySets && \"You don't have any working sets\"}</div>\r\n                        <button className=\"btn btn-workout-add-set\" onClick={handleAddSet}>+ add set</button>\r\n                        <button className=\"btn btn-workout-add-set\" onClick={handleSavedModal}>Save</button>\r\n                    </>)\r\n            }\r\n\r\n\r\n            <div className=\"btn-list-view btn-low-box\">\r\n                <Link to={\"/workouts\"} className=\"btn\">Cancel</Link>\r\n                <Link to={\"/workouts\"} className=\"btn\" onClick={() => handleFinishWorkout(currWorkout)}>Finish Workout</Link>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Workout;\r\n","import React from 'react';\r\nimport History from '../History/History';\r\n\r\n\r\nfunction ExerciseView({ exercise }) {\r\n\r\n    const { name, history } = exercise;\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"header-box\">\r\n                <div className=\"workout-title-list workout-title\">\r\n                    {name}\r\n                </div>\r\n            </div>\r\n            <History history={history} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExerciseView;\r\n","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport ExercisesList from './exercises.json';\r\nimport WorkoutsList from './workouts.json';\r\nimport Navbar from './components/Navbar/Navbar.jsx';\r\nimport ListView from './components/List/ListView';\r\nimport Workout from './components/Workout/Workout';\r\nimport ExerciseView from './components/Exercise/ExerciseView';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const exercises_data = [...ExercisesList];\r\n  const workouts_data = [...WorkoutsList];\r\n\r\n  const [exercises, setExercises] = useState(exercises_data);\r\n  const [workouts, setWorkouts] = useState(workouts_data);\r\n  const [currWorkoutName, setCurrWorkoutName] = useState(\"Push\");\r\n  const [currExerciseName, setCurrExerciseName] = useState();\r\n\r\n\r\n  const getCurrentDate = () => {\r\n    const date = new Date();\r\n    const day = date.getDate();\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n\r\n    const padded_month = month <= 9 ? \"0\" + month : month;\r\n    const padded_day = day <= 9 ? \"0\" + day : day;\r\n\r\n\r\n    return `${padded_day}/${padded_month}/${year}`;\r\n  }\r\n\r\n  const handleSaveWorkout = (name, workout) => {\r\n    const currentDate = getCurrentDate();\r\n    setWorkouts(prevWorkouts => prevWorkouts.map(workout => {\r\n      if (workout.name === name) {\r\n        return { ...workout, last_day: currentDate };\r\n      }\r\n      return workout;\r\n    })\r\n    )\r\n\r\n    setExercises(prevExercises => {\r\n\r\n      return prevExercises.map(crEx => {\r\n        for (let i = 0; i < workout.length; i++) {\r\n          if (workout[i].name === crEx.name) {\r\n            let currExHistory = [{ date: currentDate, sets: [...workout[i].sets] }, ...crEx.history]\r\n            return { ...crEx, history: currExHistory };\r\n          }\r\n        }\r\n        return crEx;\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n  let currW = workouts.find(w => w.name === currWorkoutName);\r\n\r\n  let currE = exercises.find(ex => ex.name === currExerciseName);\r\n\r\n\r\n  /*TYPES OF DATA\r\n    workout list has type = workouts\r\n    exercise list has type = exercises\r\n    workout view has type = workout\r\n  */\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <main className=\"content-wrapper\">\r\n\r\n        <Switch>\r\n          <Route exact path={[\"/\", \"/workouts\"]}>\r\n            <ListView type=\"workouts\" list={workouts} setList={setWorkouts} setCurrWorkoutName={setCurrWorkoutName} />\r\n          </Route>\r\n          <Route exact path={\"/exercises\"}>\r\n            <ListView type=\"exercises\" list={exercises} setList={setExercises} setSecondList={setWorkouts} setCurrExerciseName={setCurrExerciseName} />\r\n          </Route>\r\n          <Route exact path={`/workout-detail`}>\r\n            <ListView type=\"workout\" list={currW} setList={setWorkouts} exerciseList={exercises} setCurrExerciseName={setCurrExerciseName} />\r\n          </Route>\r\n          <Route path={`/exercise-detail`}>\r\n            <ExerciseView exercise={currE} />\r\n          </Route>\r\n          <Route path={`/workout-detail/start`}>\r\n            <Workout workout={currW} setWorkingWorkout={handleSaveWorkout} exerciseList={exercises} />\r\n          </Route>\r\n          <Route>\r\n            {\"Not found\"}\r\n          </Route>\r\n        </Switch>\r\n\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}